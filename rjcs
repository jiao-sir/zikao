
第一章：软件测试的背景：...
软件缺陷的术语：
缺点、偏差、故障、失败、问题、不一致、错误、事件、缺陷、异常
故障、失败和缺点指的是严重或者危险的情况。
 异常、事件和偏差指的是不那么尖锐，未按预料运行，而不是全部失败的情况。
 问题、错误和缺陷是最常用的术语。
软件缺陷的官方定义：
1、软件未实现产品说明书要求的功能
2、软件出现了产品说明书指明不应该出现的错误
3、软件实现了产品说明书未提到的功能
4、软件未实现产品说明书虽未明确提及但应该实现的目标
5、软件难以理解、不易使用、运行缓慢或者----从测试员的角度看----最终用户会认为不好
为什么会出现软件缺陷（软件缺陷的原因）：
1、说明书没有写或者不全面
2、设计软件规划的时候没有沟通好
3、程序员编码的问题
4、其他原因
软件缺陷的修复：
说明书---设计---编码---测试---发布，逐步递增
随着时间的推移，修复软件缺陷的费用惊人地增长
软件测试员究竟做些什么：
1、软件测试员的目标是发现软件缺陷
2、软件测试员的目标是尽可能早地找出软件缺陷
3、软件测试员的目标是尽可能早地找出软件缺陷、并确保其得以修复
优秀软件测试员应具备的素质：
1、他们是探索者
2、他们是故障排除员
3、他们不放过任何蛛丝马迹
4、他们具有创造性
5、他们是群追求完美者
6、他们判断准确
7、他们注重策略和外交
8、他们善于说服
小结（软件测试的定义）：
软件测试是一项批判性的工作。随着当今软件的规模和复杂性日益增加，进行专业化、高效的软件测试的要求越来越迫切。太多的事情处于危机中，我们不需要更多的计算机缺陷芯片，更多的崩溃的系统，更多被盗的信用卡账户。
小测验：
1、在千年虫案例中，Dave有错误吗？
在当时的情况下
2、判断：公司或者开发小组用来称呼软件问题的术语很重要。
在当时的情况下
3、仅仅测试程序是否按照预期方式运行有何问题？
在当时的情况下
4、产品发行后修复软件缺陷比项目开发早期这样做的费用要高出多少？
10~100倍。随着时间的推移，修复软件缺陷的费用会越来越高。
5、软件测试员的目标是什么？
尽可能早的发现出软件中的缺陷，并确保其得以修复。
6、判断：好的测试员坚持不懈地追求完美。
在当时的情况下
7、给出几个理由说明产品说明书为什么通常是软件产品中制造缺陷的最大来源。
和
第二章：软件开发的过程：
产品的组成部分：
软件产品需要多少投入：
1、客户需求
2、产品说明书
3、进度表
4、软件设计文档
结构文档
数据流图
状态转换图
流程图
代码注释
5、测试文档
测试计划
测试用例
缺陷报告
测试工具和自动测试
度量、统计和总结
软件产品有哪些部分组成
帮助文件
用户手册
样本和示例
标签和不干胶
产品支持信息
图标和标志
错误信息
广告和宣传材料
安装
说明文件
软件项目成员
项目经理、程序经理或监制人员
架构师、系统工程师
程序员、开发人员或代码制作者
测试员或质量保证
技术作者、用户协助专员、用户培训专员、手册编写或文案专员
配置管理员或构建员
软件开发生命周期模式
软件产品从最初构思到公开发行的过程称为软件开发生命周期
大爆炸模式
优点是简单。计划、进度安排和正规开发过程几乎没有，所有精力都花在了开发软件和编写代码上。
边写边改模式
瀑布模式
三点强调
1.瀑布模式非常强调产品的定义。2.瀑布模式各步是分立的，没有交叉。3.瀑布模式无法回溯。
螺旋模式
总体思想
一开始不必定义所有细节。从小开始，定义重要功能，努力实现这些功能，接受客户反馈，然后进入下一个阶段。重复上述过程，直至得到最终产品。
每一次循环包括6个步骤
1.确定目标、可选方案和限制条件
2.明确并化解风险
3.评估可选方案
4.当前阶段开发和测试
5.计划下一阶段
6.确定进入下一阶段的方法
软件测试员为什么喜欢改模式
因为通过参与最初的设计阶段，可以尽早地影响到产品，可以把产品的来龙去脉弄得很清楚；并且在项目末期，不至于最后一分钟还在匆匆忙忙地进行全面测试。软件测试员的测试一直在进行，所以最后一步只是验证表面的所有部分都没有问题。
敏捷软件开发
目的
1.通过过程和工具理解个人和交流的作用
2.通过全面的文档理解运行的软件
3.通过合同和谈判得到客户的协作
4.在计划的执行中做出对变更的响应
5.也就是说，在一方面有价值的时候，更应评价它在另一方面的价值
小结：
小测验：
1、说出程序员在开始编码之前要完成哪些任务？
在当时的情况下
2、正是并被锁定不能修改的产品说明书有何缺点？
在当时的情况下
3、软件开发大爆炸模式的最大优点是什么？
简单。仅此而已。
4、采用边写边改模式时，如何得知软件发布的时间？
没有真正的标准退出标准，除非某人或者进度决定要结束了。
5、瀑布模式为什么不好用？
尽可能早的发现出软件中的缺陷，并确保其得以修复。
6、软件测试员为什么喜欢螺旋模式？
在当时的情况下
第三章：软件测试的实质
测试的原则
完全测试程序是不可能的
4个原因：1.输入量太大。2.输入结果太多。3.软件执行路径太多。4.软件说明书是主观的，可以说是从旁观者来看是缺陷。
软件测试是有风险的行为
软件测试要学会的关键思想
如何把数量巨大的可能测试减少到可以控制的范围，以及如何针对风险做出明智的选择，那些测试重要，那些不重要。
测试无法显示潜伏的软件缺陷
找的的软件缺陷越多，就说明软件缺陷越多
其中原因：1.程序员也有心情不好的时候。2.程序员往往犯同样的错误。3.某些软件缺陷实乃冰山一角。
并非所有软件缺陷都要修复
原因：1.没有足够的时间。2.不算真正的软件缺陷。3.修复的风险太大。4.不值得修复。
什么时候才叫缺陷难以说清
尚未发现或者观察到的软件缺陷只能说是潜在风险
产品说明书从没有最终版本
软件测试员在产品小组不受欢迎
建议：1.早点找出缺陷。2控制情绪。3不要总是报告坏消息。
软件测试是一个讲究条理的技术职业
软件测试的术语和定义
精确和准确
软件测试要精确还是准确很大程度取决于产品是什么，最终取决于开发小组的目标。
确认和验证
确认是保证软件符合产品说明书的过程
验证是保证软件满足用户要求的过程
1990年4月，哈勃望远镜例子
质量和可靠性
韦氏电子词典把质量定义为“优秀程度”或者“同类优越性”
可靠性仅仅是质量的一方面
测试和质量保证
软件测试员的目标是尽可能早地找出软件缺陷，并确保缺陷得以修复
软件质量保证人员的主要职责是创建和执行改进软件开发过程并防止软件缺陷发生的标准和方法
小测验
假定无法完全测试某一程序，在决定是否应该停止测试时要考虑那些问题？
启动Windows计算器，输入5,000-5=（逗号不能少），观察结果。这是软件缺陷吗？为什么？
假如测试模拟飞行或者模拟城市之类的模拟游戏，精准度和准确度哪一个更值得测试？
有没有质量很高但可靠性很差的产品？请举例说明。
为什么不可能完全测试程序？
假如周一测试软件的某一功能，每小时发现一个新的软件缺陷，你认为周二将会以什么样的频率发现软件缺陷？
第四章：检查产品说明书
开始测试
黑盒测试
软件测试员只需要软件要做什么，而无法看到盒子里的软件是如何运行的。只要进行一些输入，就能得到某种输出结果。他不知道软件如何运行、为什么会这样，只知道程序做了什么。
有时又称功能性测试或行为测试。
白盒测试
软件测试员可以访问程序员的代码，并通过检查代码的线索来协助测试，可以看到盒子里面。测试员根据代码检查结果判断可能出错的数目，并据此制定测试
有时称为透明盒测试
静态测试
指测试不运行的部分，只是检查和审核
动态测试
指通常意义的测试，使用和运行软件
静态黑盒测试--测试产品说明书
对产品说明书进行高级审查
假设自己是客户
质量的定义是“满足客户要求”
研究现有的标准和规范
公司惯用语和约定
行业要求
政府标准
图形用户界面（GUI）
安全标准
审查和测试类似软件
审查竞品时候要注意的问题
1.规模。2.复杂性。3.测试行。4.质量和可靠性。5.安全性
产品说明书的低层次测试技术
产品说明书属性检查清单
8个重要的属性
1.完整。2准确。3精确、不含糊、清晰。4.一致。5体贴。6.合理。7.代码无关。8.可测试性。
产品说明书用语检查清单
1.总是、每一种、所有、没有、从不。
2.当然、因此、明显、显然、必然。
3.某些、有时、常常、通常、惯常、经常、大多、几乎。
4.等等、诸如此类、以此类推、例如
5.良好、迅速、廉价、高效、小、稳当。
6.处理、进行、拒绝、跳过、排除。
7.如果----那么----（没有否则）。
小测验
软件测试员可以根据产品说明书进行白盒测试吗？
试举例一些Mac或Windows的标准规范的例子。
指出下述产品说明中的错误：当用户选择Compact Memory选项时，程序将使用Huffman解析矩阵方法尽可能压缩邮件数据列表。
解释软件测试员应该担心下述产品说明的那些内容：尽管通常连接不超过100万个，但是该软件允许多达1亿个并发的连接。
第五章：带上眼罩测试软件
动态黑盒测试：带上眼罩测试软件
动态黑盒测试常常被称为行为测试，因为测试的是软件在使用过程中的实际行为。
不深入了解代码细节测试软件的方法称为动态黑盒测试。它是动态的，因为程序在运行，软件测试员像用户一样使用它。它是黑盒，因为在测试时不知道程序如何工作，带上了眼罩。
测试用例是指进行测试时使用的特定和输入，以及测试软件的步骤。
通过性测试和失效性测试
测试软件有两种基本方法：通过性测试、失效性测试。
通过性测试：实际上时确认软件至少能做什么，而不会考验其能力。
失效性测试：纯粹为了破坏软件而设计和执行的测试用例称为失效性测试或错误强制测试。
等价类划分
选择测试用例的方法称为等价类划分，有时称为等价分类。
​等价类划分是指分步骤地把海量（无限）的测试用例集缩减得很小，但过程同样要求。
一个等价类或者等价划分是指测试相同目标或者暴露相同软件缺陷的一组测试用例。
在寻找等价划分时，考虑把软件中具有相似输入、相似输出、相似操作的分在一组。这些组就是等价划分。
等价类划分的目标是把可能的测试用例缩减到可控制且仍然足以测试软件的小范围内。
数据测试
边界条件
边界条件是指软件运行在计划操作界限的边界的情况。
如果要选择在等价划分中包含那些数据，就根据边界来选择。
围绕边界条件进行等价划分并建立测试用例时至关重要的。是减少测试工作量最为有效的方法。
在软件的每一个部分不断寻找边界条件是极为重要的，寻找做的越多，边界就会发现得越多，可能找出的软件缺陷就越多。
次边界条件
在软件内部，最终用户几乎看不到，但是软件测试员仍有必要进行检查。这样得边界条件称为次边界条件或者内部边界条件。
空置和无效数据
一定要考虑建立处理默认值、空白、零值或者无输入等条件的等价划分。
非法、错误、不正确的垃圾数据
失效性测试的对象
状态测试
软件状态是指软件当前所处的条件或者模式
测试软件的逻辑流程
1、建立状态转换图
软件转换图应该表示出以下项目：
1.软件可能进入的每一种独立状态。
2.从一种状态转入另一种状态所需的输入和条件
3.进入或者退出某种状态时的设置条件及输出结果。
2、减少要测试的状态及转换的数量
将大量的可能性减少到可以操作的测试用例集有以下5中方法：
1.每种状态至少访问一次。
2.测试看起来时最常见和最普遍的状态转换。
3.测试状态之间最不常用的分支。
4.测试所有错误状态及其返回值。
5.测试随即状态转换。
3、怎样进行具体测试
测试状态及其转换包括检查所有的状态变量，与进入和退出状态相关的静态条件、信息、值、功能等。
失败状态测试
1、竞争条件和时序错乱
2、重复、压迫和重负
重复测试是不断执行同样的操作。主要原因时检查是否存在内存泄漏。
压迫测试是使软件在不够理想的条件下运行，内存、磁盘空间、CPU速度慢，调制解调器速率低等。观察软件对外部资源的要求和以来的程度。压迫测试就是将支持降到最低限度，目的在于尽可能地限制软件的必要条件。
重负测试与压迫测试相反。压迫测试是尽量限制软件、而重负测试是尽量提供条件任其发挥，让软件处理尽可能大的数据文件。
重复、压迫和重负测试应联合使用，同时进行，这是找出 以其他方法难以发现的严重缺陷的一个可靠方法。
其他黑盒测试技术
1、.像笨拙的用户那样做
2、在已经找到软件缺陷的地方再找找
3、像黑客一样考虑问题
4、凭借经验、直觉和预感
小测验
1.判断：在没有产品说明书和需求文档的条件下可以进行动态黑盒测试。
2.如果测试程序 向打印机输送打印内容，应该选用那些通用的失效性测试用例？
5.判断：访问程序的所有状态也确保了遍历各种状态之间的转换。
6.绘制状态转换图有多种不同的方法，但是他们都具有的三个相同要素是什么？
7.Windows计数器程序的初始状态变量有哪些？
9.当设法显露竞争条件软件缺陷时，要对软件进行何种操作？
10.判断：在进行压迫测试的同时进行重负测试时不合情理的。
第六章：检查代码
6.1  静态白盒测试：检查设计和代码
静态白盒测试是在不执行软件的条件下有条理地仔细审查软件设计、体系结构和代码，从而找出软件缺陷的过程，有时称为结构化分析。
进行静态白盒测试的首要原因是尽早发现软件缺陷，以找出动态黑盒测试难以发现或隔离的软件缺陷。
进行静态白盒测试的另外一个好处是，为黑盒测试员在接到软件进行测试时设计和应用测试用例提供思路。
6.2 正式审查
6.2.0 正式审查
正式审查就是进行静态白盒测试的过程。正式审查的含义很广，从两个程序员之间的简单交谈，到软件设计和代码的详细、严格检查，均属于此过程。
正式审查的4个基本要素：
1.确定问题
2.遵守规则
3.准备
4.编写报告
正是审查的间接效果：
1.交流 2.质量 3.小组同志化 4.解决方案
6.2.1 同事审查
称为伙伴审查
6.2.2 走查
陈述者逐行或者逐个功能地通读代码，解释代码为什么且如何工作。
6.2.3 检验
检验是最正式地审查类型，具有高度组织化，要求每一个参与者都接受训练。
检验与同时审查和走查地不同之处在于表述代码的人（表述者或者宣读者）不是原来的程序员。
其余的参与者称为检验员，其职责是从不同的角度如用户、测试员或者产品支持人员的角度审查代码。
有些检验员还同时被委任会议协调员和会议记录员，以保证检验过程遵守规则及审查有效进行。
6.3 编码标准和规范
三个重要的原因要坚持标准或规范：
1.可靠性
2.可读性/维护性
3.移植性
6.3.1 编程标准和规范示例
标准由4个部分组成：
1.标题。
2.标准。
3.解释说明
4.示例（非必需）
6.3.2 获取标准的渠道：
以下专业组织还提供演示程序规范和最佳实践的文档：
1.美国计算机协会（ACM）
2.电气和电子工程师协会（IEEE）
大多数计算机语言和信息技术的国家和国际标准渠道：
1.美国国家标准学会（ANSI）
2.国际工程协会（IEC）
3.国际标准化组织（ISO）
4.信息技术标准国家委员会（NCITS）
6.4 通用代码审查清单
6.4.1 数据引用错误
数据引用错误是指使用未经正确声明和初始化的变量、常量、数组、字符串或记录而导致的软件缺陷。
6.4.2 数据声明错误
数据声明错误产生的原因是不正确地声明或使用变量和常量。
6.4.3 计算错误
最糟糕的数学问题，计算无法得到预期结果。
6.4.4 比较错误
小于、大于、等于、不等于、真、假--比较和判断错误很可能由于边界条件问题。
6.4.5 控制流程错误
控制流程错误的原因是编程语言中循环等控制结构未按预期方式工作。他们通常由计算或者比较错误直接或间接造成。
6.4.6 子程序参数错误
子程序参数错误的来源是软件子程序不正确地传递数据。
6.4.7 输入/输出错误
输入/输出错误包括文件读取、接受键盘或者鼠标输入以及向打印机或者屏幕等输出设备写入错误。
6.4.8 其他检查
小测验：
1.说出进行静态白盒测试的几个好处。
2.判断：静态白盒测试可以找出遗漏之处和问题。
3.正是审查由那些关键元素组成？
4.除了正式之外，检验和其他审查类型有什么重大差别？
5.如果程序员在命名变量时只能使用8个字符并且首字母必须采用大写的形式，那么这时标准还是规范呢?
6.你会采用本章的代码审查清单作为项目小组验证代码的标准吗？
7.缓冲区溢出错误作为一个常见的安全问题属于哪一级错误？是由什么原因引起的？
第七章：带上X光眼睛测试软件
7.1 动态白盒测试
动态白盒测试是指利用查看代码功能（做什么）和实现方式（怎么做）得到的信息来确定哪些需要测试，那些不要测试，如何开展测试。
动态白盒测试的另一个常用名称是结构化测试，因为软件测试员可以查看并使用代码的内部结构，从而设计和执行测试。
动态白盒测试包括以下4个部分：
直接测试底层函数、过程、子程序和库。
以完整程序的方式从顶层测试软件，但是根据对软件运行的了解调整测试用例。
从软件获得读取变量和状态信息的访问权，以便确定测试与预期结果是否相符，同时，强制软件以正常测试难以实现的方式运行。
估算执行测试时“命中”的代码量和具体代码，然后调整测试，去掉多余的测试用例，补充遗漏的用例。
7.2 动态白盒测试和调试
动态白盒测试的目标时寻找软件缺陷，调试的目标是修复缺陷。
7.3 分段测试
7.3.1 单元测试和集成测试
在底层进行的测试称为单元测试或者测试模块。
单元经过测试，底层软件缺陷被找出来修复之后，就集成在一起，对模块的组合进行集成测试。
这个不断增加的测试过程继续进行，假如越来越多的软件片段，直至整个产品，至少是产品的主要部分，在称为系统测试的过程中一起测试。
递增测试的途径：自底向上，自顶向下
7.3.2 单元测试用例
在进行白盒测试之前，一定要根据说明书建立黑盒测试用例。用这种方式可以真正测试模块的功能和作用。
7.4 数据覆盖
7.4.1 数据流
数据流覆盖主要是指软件中完全跟踪一批数据。在单元测试级，数据仅仅通过了一个模块或者函数。
同样的跟踪方式可以用于多个集中模块，甚至整个软件产品-----尽管这样做是非常耗时的。
7.4.2 次边界
如果进行白盒测试，就需要仔细检查代码，找到次边界条件，并建立能测试它们的测试用例。
询问编写代码的程序员是否直到这些条件，并对内部数据表给给予特别的注意，因为这里聚集了大量的次边界条件。
7.4.3 公式和等式
撇开代码中的公式和等式，查看他们的变量，在程序正常输入和输出之外，为其建立测试用例和等价划分。
7.4.4 错误强制
7.5 代码覆盖
与黑盒测试一样，测试数据只是一半工作。为了全面地覆盖，还必须测试程序的状态以及程序流程，必须设法进入和退出某一个模块，执行每一行代码，进入软件每一条逻辑和决策分支。这种类型的测试叫做代码覆盖测试。
代码覆盖测试是一种动态白盒测试，因为它要求通过完全访问代码以查看运行测试用例时经过了那些部分。
可以从代码覆盖率测试器中获得指示软件哪些部分被执行，哪些部分未被执行的统计结果，利用该数据可以得到：
1.测试用例没有覆盖软件的哪些部分。
2.那些测试用例是多余的。
3.为了使覆盖率更好，需要建立什么样的新测试用例。
7.5.1 程序语句和代码行覆盖
代码覆盖最直接的形式是语句覆盖或者代码行覆盖。
7.5.2 分支覆盖
试图覆盖软件中的所有路径称为路径覆盖。路径测试最简单的形式称为分支覆盖测试。
大多数代码覆盖率分析器将根据代码分支，分别报告语句覆盖和分支覆盖的结果，使软件测试员更加清楚测试的效果。
7.5.3 条件覆盖
条件覆盖测试将分支语句的条件考虑在内。
小结
静态黑盒测试是指检查产品说明书，并在软件编写之前找出问题。
动态黑盒测试是指在不了解软件如何工作的前提下进行测试。
静态白盒测试是指通过正式审查和检验代码的细节。
动态白盒测试是指在看到软件的工作方式时，根据获得的信息对软件进行测试。
小测验
1.为什么了解了软件的工作方法会影响测试的方式和内容？
2.动态白盒测试测试和调试有何区别？
动态白盒测试的目标是发现软件缺陷，调试的目标是修复软件缺陷。
3.在大爆炸软件开发模式下几乎不可能进行测试的两个软件是什么？如何解决？
4.判断：如果匆忙开发产品，就可以跳过模块测试而直接进行集成测试。
5.测试桩和测试驱动有何差别？
测试桩像处于测试的模块发送数据。
测试驱动可以代替实现软件，对底层模块进行更有效的测试。
6.判断：总是首先设计黑盒测试用例。
7.在本章描述的三种代码覆盖中，哪一种最好？为什么？
8.静态和动态白盒测试最大的问题是什么？
第八章：配置测试
重点
为什么配置测试必不可少
为什么配置测试可能是艰巨的任务
配置测试的基本方法
如何找到需要测试的硬件
如果不是在为台式机测试软件怎么办
8.1 配置测试综述
配置测试是指使用各种硬件来测试软件运行的过程。
8.1.1 分离配置缺陷
项目小组修复或者厂商修复。无论问题出在哪里，解决问题都是开发小组的责任。客户不关心。
8.1.2 计算工作量
配置测试工作的计算量可能非常巨大，减少麻烦的答案是等价划分.
8.2 执行任务
8.2.1 确定所需的硬件类型
8.2.2 确定有哪些厂商的硬件、类型和驱动程序可用
8.2.3 确定可能的硬件特性、模式和选项
8.2.4 将确定后的硬件配置缩减为可控制的范围
8.2.5 明确与硬件配置有关的软件唯一特性
8.2.6 设计在每中硬件配置中执行的测试用例
8.2.7 在每种配置中执行测试
8.2.8 反复测试直到小组对结果满意为止
8.3 获得硬件
8.4 明确硬件标准
8.5 对其他硬件进行配置测试
小测验：
1.部件和外设的区别？
2.如何辨别发现的软件缺陷是普通问题还是特定的配置问题？
3.如何保证软件永远不会有配置问题？
4.有些公司购买通用的硬件，贴上自己公司的名称，然后当作自己的产品来卖。在电脑超市里经常看到这些低价的外设在销售。同样“翻版”的外设可能在不同的商品里冠以不同的名称销售。判断：选择测试的配置的时候只需考虑一种翻版的声卡。
5.除了年头和流程程度，对于配置测试，配置测试中用于等价划分硬件的其他原则是什么？
6.能够发布具有配置缺陷的软件产品吗？
第九章：兼容性测试
兼容性测试综述
软件兼容性测试是指检查软件之间是否能够正确的交互和共享信息。交互可以在同时运行于同一台计算机上的两个程序之间，甚至在相隔几千公里、通过因特网连接的不同计算机上的两个程序之间运行。交互还可以简化为在软盘上保存数据，然后拿到其他房间的计算机上。
兼容性对于软件的意义取决于开发小组决定用什么来定义，以及软件运行的系统要求和兼容性级别。
平台和应用程序版本
向后兼容是指可以使用软件的以前版本；向前兼容是指可以使用软件的未来版本；
软件测试员应该为检查软件向前和向后兼容性所需的测试提供相应的输入。
决定要选择的程序原则是：
1.流行程度。2年头。3.类型。4.生产厂商。
标准和规范
高级标准和规范
高级标准是产品普遍遵守的规则，例如外观和感觉，支持的特性等。
低级标准和规范
低级标准是本质细节，例如文件格式和网络通信协议等。
数据共享兼容性
如果在进行测试记住以下3，就可以得心应手地处理上述每一种任务
1.对兼容软件地所有可能选择进行等价划分，使其成为可以控制地范围。当然，项目经理要认可测试清单，并接受由于未完全测试而引起的风险。
2.研究适用于测试软件的高级/低级标准和规范。把它们当作产品说明书的补充内容。
3.测试软件程序之间不同的数据流动方式。其中的数据交换就是程序之间保持兼容的因素。
小测验
判断：所有软件必须进行某种程度的兼容性测试。
错。有极少数独立使用、专用、不与任何外界打交道的软件不需要进行兼容性测试。但是除此之外99%的软件都必须进行某中程度的兼容性测试。
判断：兼容性是一种产品特性，可以有不同程度的符合标准。
对。软件的兼容性取决于客户的要求。某个文字处理程序与其竞争对手产品的文件格式不兼容或者新操作系统不支持某一游戏软件，都是正常的。软件测试员应该通过确定兼容性检查的工作量大小，为兼容性测试的决定提供依据。
如果受命对产品到的数据文件格式进行兼容性测试，应该如何完成任务？
研究接受测试的程序文件是否符合已有的标准。如果是这样，要测试程序确实遵循这些标准。对可能读写程序文件的程序进行等价划分。设计测试文档，使其包含程序能读写的数据类型的典型类例。测试这些文件在接受测试的程序和其他程序之间是否能正确传输。
如何进行向前兼容性测试？
向前兼容性测试不容易，对现在仍然见不到的东西进行测试毕竟难以实现。解决问题的方法是，完整细致地将测试定义在可以作为标准之处，从而使标准称为判定向前兼容性测试的手段。
第十章：外国语言测试
重点
为什么只进行翻译是不够的
单词和文本受何影响
足球和电话为什么重要
配置和兼容性问题
测试其他语言有多大的工作量
使文字和图片有意义
使软件适应特定地域特征，照顾到语言、方言、地区习俗和文化的过程称为本地化或国际化。测试此类软件称为本地化测试。
翻译问题
可能出现的翻译问题最直接的例子来自于文本扩展。
解决不同语言的方法是使用Unicode标准
Unicode为每一个字符提供唯一编号，无论何种平台，无论何种程序，无论何种语言。
热键和快捷键
在软件的本地化中，需要测试所有热键和快捷键是否正常，而且使用起来不困难。
扩展字符
测试扩展字符的方法是找出软件中所有接受字符输入和输出之处。
测试扩展字符是否被正确处理的最简单的方法是，把它们加入测试的标准字符所在的等价划分中。
字符计算
扩展字符计算打破的另一个领域是大小写转换。
从左向右和从右向左读
利用操作系统的特性来实现这些需要大量的编程工作。
从测试员的角度看，把它当作全新的产品，而不仅仅是本地化产品比较稳妥。
图形中的文字
它的影响是当软件本地化时，每一个图片都要改变，以反映新的语言。
如果有不少这样的图标，本地化程序就会耗资巨大。
要在开发周期的早期找出图形文本软件缺陷，而不要留到最后发现。
让文本与代码脱离
白盒测试问题
这句话的意思是说所有文本字符串、错误提示信息和其他可以翻译的内容都应该存放在源代码独立的文件中。
本地化问题
描述
经过准确翻译和仔细测试的软件都是精确和可靠的，但是如果程序员不考虑本地化的问题，程序就可能不够准确和高质量。
一个软件尽可能外观和感觉很佳、容易理解、及其稳定，但是对他其他地方的人来说，它可能时完全错误的。
首先要保证产品正确地本地化，才能够谈到下一步。
内容
软件中包含的内容无论时文字、图形、声音还是别的，都特别容易引起本地化问题。
数据格式
不同的地区诸如货币、时间和度量衡上使用不同的数据单位格式。
如果测试本地化软件，就需要对当地使用的度量单位非常熟悉。
为了正确测试软件，需要从原版软件创建的测试数据中建立不同的等价划分。
配置和兼容性问题
国外平台配置
在设计等价划分时，不要忘了应该考虑构成平台的所有硬件和软件，包括硬件本身、设备驱动和操作系统。
数据兼容性
问题？
测试量有多大
这个复杂的问题落到了两个问题上：
项目一开始就计划本地化了吗？
如果软件从一开始设计就考虑到了本章论述的问题，那么本地化版本中包含更多软件缺陷和增加测试量的风险就很小。
相反，如果软件专门为美国英语市场编写，后来决定本地化其他语言，那么明智的选择是把软件当作需要进行全部测试的全新版本。
本地化版本中更改程序代码了吗？
这个问题关系到软件产品中什么需要改变。
如果本地化工作只限于修改诸如文字和图形等内容--不是代码---测试工作可能只是对改动进行合法性检查。
但是，如果因为低劣的设计或者其他问题，基本代码必须改变，就要考虑测试代码，并且检查功能和内容。
本地化测试量的要求是有一个风险的抉择，与所有的测试都一样。随着测试经验的增长，就会直到决定过程中有哪些变数。
小测验
翻译和本地化有何区别？
翻译只考虑语言的方面－－翻译词语。
本地化要照顾到地区和国家的习惯、风俗和文化。
要了解他国语言才能测试本地化产品吗？
不必，但是，测试小组中要有人熟练掌握该语言。
不懂该语言可以测试与该语言无关的软件部分，但是懂一点外语可以促进测试。
什么是文本扩展，由此可能导致什么样的常见软件缺陷？
当文本被翻译成其他语言时出现文本扩展。
文本字符串长度可能增加１倍或更长。
原来在屏幕上适应对话框、按钮等的文本不再适应，甚至可能导致软件崩溃，因为变长的文本在为该字符保留的内存放不下，会覆盖其他内存空间。
指出扩展字符可能导致问题的一些领域。
经过排序或者按字母排序的字词次序混乱，大小写转换出错，以及常见的显示和打印问题。
使文本字符串与代码脱离为什么重要？
如果进行本地化的人只用修改文字而不必修改程序代码，工作就会简单很多了。
这样还会简化测试工作，因为已经知道软件的本地化版本中代码不变。
说出在本地化程序之间可能变化的一些数据格式类型。
度量单位，例如磅、英寸、公升。
２４小时制或１２小时制
最近随着欧洲一些国家成立欧盟，货币成为一个重要问题。
如此等等。
第十一章：易用性测试
重点：
易用性测试包括什么
易用性测试时交互的适用性、功能性和有效性的集中体现。
在测试用户界面时要找什么
有残疾障碍的人员需要那些特殊的易用性功能
用户界面测试
用于与软件或程序交互的方式称为用户界面或UI。
从技术上讲，它们与计算机进行同样的交互－提供输入和接受输出
优秀UI由什么构成
７个要素：
符合标准和规范
最重要的
直观
一致
被测试软件本身以及与其他软件的一致是一个关键属性。
在审查产品时想一想以下几个基本术语：
快速键和菜单选项。
术语和命名。
听众。
诸如OK和Cancel按钮的位置。
灵活
灵活性对于测试的影响主要在第５章所讲的状态和数据：
状态跳转。
状态终止和跳过。
数据输入和输出。
舒适
鉴别软件舒适性好坏的一些好想法：
恰当
错误处理
性能。快不见得是好事。
正确
要特别注意的地方：
市场定位偏差
语言和拼写
不良媒体
ＷＹＳＩＷＹＧ（所见即所得）
实用
是否实用是优秀用户界面的最后一个因素，这不是指软件本身是否实现，而是指具体特性是否实用。
为残疾人测试：辅助选项测试
下列集中残疾对使用计算机和软件会造成极大的困难：
视力损伤
听力损伤
运行损伤
认知和语言障碍
在美国有３条法律适用
软件中的辅助特性
两种方式提供辅助
１.最容易的方式是利用平台或者操作系统内置的支持。
２.如果测试的软件不在这些平台上运行，或者本身就是平台，就需要定义、编制和测试自己的辅助选项。
如果正在测试产品的易用性，一定要专门为辅助选项建立测试用例。该领域完全测试之后感觉一定不错。
Ｗｉｎｄｏｗｓ提供了以下能力：
粘滞键
筛选键
切换键
声音卫士
声音显示
高对比度
鼠标键
串行键
小结
软件缺陷定义--软件难以理解,不易使用,运行缓慢或者,从测试员的角度看最终用户认为不好
小测验
判断:所有软件都有一个用户界面,因此必须测试易用性.
对。
用户界面设计是一门科学还是一门艺术?
两者兼而有之。许多在实验室经过严格研究、完全测试的用户界面，投入市场却是完全失败的。
既然用户界面没有明确的对与错，怎么测试呢问?
软件测试员应当检查其是否符合7个重要原则：符合标准和规范、直观、一致、灵活、舒适、正确和实用。
列举熟悉的产品中设计低劣或者不一致的UI例子。
那４种残疾会影响软件的易用性。
视力损伤
听力损伤
运行损伤
语言和认知障碍
第十二章：文档测试
重点
软件文档的不同类型
文档测试为什么重要
在测试文档时要找什么
软件文档的类型
包装文字和图形
市场宣传材料、广告以及其他插页
授权／注册登记表
EULA，最终用户许可协议
标签和不干胶条
安装和设置指导
用户手册
联机帮助
指南、向导和CBT（计算机基础训练）
样例、示例和模板
错误提示信息
文档测试的重要性
好的软件文档以下述３中方式确保产品的整体质量
提高易用性
易用性大多与软件文档有关
提高可靠性
可靠性是指软件稳定和坚固的程度
降低支持费用
好的文档可以通过恰当的解释和引导用户解决困难来预防这种情况
审查文档时要找什么
两个等级
如果时非代码，测试就是检查产品说明书和检查代码的静态过程。可以视为技术编辑或技术校对。
如果是文档和代码紧密结合在一起，就要进行动态测试，利用白盒测试的技术进行检查。属于真正的软件测试。
文档是软件驱动的，就要像其余部分一样测试
检查索引表是否完整，搜索结构是否正确。
超级链接和热点是否跳转到正确的页面。
利用等价划分技术确定尝试那些测试用例。
文档测试的实质
以下这些问题可以称作文档测试的实质
文档常常得不到足够的重视、预算和援助
编写文档的人可能对软件做什么不甚了解
印刷文档制作要花不少时间
小结
联机帮助索引遗漏一个重要条目，安装指导中存在错误步骤，或者出现明显的拼写错误，都属于与其他软件失败一样的软件缺陷
如果正确地测试文档，就可以在用户使用之前发现这些缺陷
小测验
Ｗｉｎｄｏｗｓ画图程序帮助索引包含２００多个条目，从ａ到ｚ，是否测试每一条条目才能够到到达正确的帮助主题？加入有１０００００个索引条目呢？
任何一个测试都存在风险问题。如果有充足的时间测试所有索引项，就应该这样做。
如果无法进行完全测试，就必须对认为有必要检查的对象建立等价划分。
可以根据程序员关于索引系统工作方式的介绍来做决定；
可以像文档作者请教索引项时如何生成的。
可以尝试每一个开头字母，或者从第１个，第２个，第４个，第８个，第１６个．．．逐步测试等
判断：测试错误提示信息属于文档测试范围
对。这不仅仅是文档测试。信息的内容需要作为文档测试；而强制信息显示和保证显示信息准确无误是代码测试的任务
好的文档应以那３中方式确保产品的整体质量？
提高易用性，提高可靠性，降低支持费用
第十三章：软件安全性测试
基本名词：
安全产品：是指产品在系统的所有者或管理员的控制下，保护用户信息的保密性、完整性、可获得性，以及处理资源的完整性和可获得性。
安全漏洞：是指使产品不可行的缺陷，即使是正确地使用产品，防止攻击者窃取系统的用户权限、调节操作、破坏数据，或建立未授权的信任。
黑客：是指精通计算机编程和使用的人、电脑玩家、使用编程技能来获得对计算机网络或文件的非法访问的人。
数据引用错误：使用没有被正确声明和初始化的变量、常数、数组、字符串或记录引起的缺陷。缓冲区溢出就是这种缺陷。
潜在数据：用户变更时未被删除的保留数据叫作潜在数据。
5-8扇区的数据就是潜在数据。在第5扇区，后半部分控件数据叫作RAM损耗。6-8扇区，叫作磁盘损耗。
RAM损耗和磁盘损在文件保存到磁盘上时会被无意识地写入磁盘。
简答
黑客获得系统访问权限的5个动机：
挑战/成名、好奇、使用/借用、恶意破坏、偷窃
威胁模型分析过程的步骤：
1）构建威胁模型分析小组
2）确认价值
3）创建一个体系结构总体图
4）分解应用程序
5）确认威胁
6）记录威胁
7）威胁等级评定
恐怖公示（DREAD）表示：
潜在的损害、可反复性、可利用性、受影响的用户、可发现性
使用安全字符串函数的好处：
1）每个函数接收目标缓冲区的长度作为输入。
2）函数空字符中止所有的输入字符串，即使操作截断了预计的结果。
3）所有函数返回一个NTSTATUS值，改值只有一个可能成功的代码。
4）每个函数都提供版本。
习题：
1、在电影《战争游戏》中攻破北美放空联合司令部的计算机系统的动机是什么？
使用和政府。可能还有一些挑战和树立威信的动机。
2、威胁模型分析是一个由软件测试员执行的正是过程，用以确定在那些地方最适合进行针对安全漏洞的测试。
错误。这是由整个项目小组执行的正是过程。
3、JPEG病毒是由一个缓冲区溢出缺陷产生的。那两类检查最能描述处这个溢出发生的原因？
计算错误，预计结果值只能为正数。当结果值变为负数时，会变成一个巨大的正数。
数据引用错误，因为当数据变成一个巨大的正数后，目标缓冲区的大小就没有限制在注明的大小范围内。
第十四章：网站测试
基本解释：
灰盒测试：灰盒测试是把黑盒测试和白盒测试的界限打乱了。仍然把软件当作黑盒来测试，但是通过简单查看软件内部工作机制来补充。
配置测试：配置测试是在各种硬件和软件平台类型以及不同的设置情况下检查软件运行的过程。
兼容性测试：是检查软件和其他软件一期运行的过程。
简答：
需要考虑可能会影响网站运行和外观的内容清单：
1）硬件设备
2）浏览器软件和版本
3）浏览器插件
4）浏览器选项
5）视频分辨率和色深。
6）文字大小
7）调制解调器速率
网站易用性测试清单：
1）盲目使用不成熟的新技术
2）滚动文字、滚动块和不停运行的动画。
3）滚动显示的长页面
4）非标准的链接颜色
5）过期信息
6）下载时间过长
7）缺少导航支持
8）孤页
9）复杂的网站地址
10）使用框架
习题
1、使用黑盒测试计数，网页的哪些基本元素可以轻易地测试到？
文本、图像、超级链接
2、什么是灰盒测试？
灰盒测试是可以边看着代码、边利用代码和信息帮助测试。它不像白盒测试一样详细地检查代码。代码用来协助测试，但是测试并不完全基于代码。
3、为什么网站测试可以使用灰盒测试？
因为很多网站主要由易于查看的HTML标记语言，而不是可执行程序构成。所以可以既快又轻松地查看网页的构成，然后根据此设计出测试。
4、为什么不能依赖拼音检查工具来检查网页的拼写？
因为拼音检查器只能检查普通文本，不能检查图形化了的字母和随时间或每次查看时候都改变的动态生成的文字。
5、列出在进行网站兼容性测试和配置测试时需要考虑的一些方面。
硬件平台、操作系统、Web浏览器、浏览器插件、浏览器选项和设置、视频分辨率和色深、文字大小、调制解调器速率
6、Jakob Neilsen 的10个常见网站错误中那几个会导致兼容性和配置缺陷？
盲目使用不成熟的新技术。
第十五章：自动测试和测试工具
自动化测试能够有效地提高测试效率和质量，减少测试成本，同时可以运行更多的测试和进行更频繁的回归测试，但并不能完全避免重复测试的情况。一些测试场景需要多次运行才能达到理想的覆盖率和准确度，这就需要进行重复测试。
基本解释
大多数代码覆盖率分析器是入侵式工具，因为它们需要编译并链接到原程序中才能获取所需的信息。例如查看器和监视器。
非入侵式的工具，通信分析器。
驱动程序是控制和操作被测试软件的工具。最简单的驱动程序例子是批处理文件。
桩和驱动程序本质是相反的，桩不控制或者操作被测试软件；相反，它接收或者响应软件发送的数据。
压力和负载工具用于向被测试软件增加压力和负载。
干扰注入器和噪声发生器。它们类似与压力和负载工具，但是在行为上更具有随机性。
分析工具
软件测试自动化
宏录制器和回放：宏录制器和播放器是一种驱动程序工具，利用宏程序，测试测试员可以回放录制的宏，重复执行测试软件的操作。
可编程的宏：是在简单录制和回放的变化上的一大进步。可编程的宏还可以解决宏录制的许多时序问题，不是依靠绝对延时，而是等待特定特定条件成立时才继续执行。
测试猴子：自动测试不是为帮助执行或者自动执行测试用例而设计的，其目标是模拟用户可能的操作。此类自动化工具称为测试猴子。
简答题
工具和自动化的主要属性是：
速度 、效率、准确率和精确度、节省资源、仿真和模拟、坚持不懈
Macro Magic设置向导可以设置宏的如下选项：
名称、重复次数、触发条件、捕捉对象、回放速度、回放位置
实现自动化工具检查软件是否按照预期方式运行的几种方式
屏幕捕获、控件值、文件和其他输出
习题
1、说出使用软件测试工具和自动化的一些好处
它们可以加快执行测试用例的时间；
能够提高软件测试员的效率，从而留出更多时间进行测试计划和测试用例开发。
它们精确且不会懈怠
2、在决定使用软件测试工具和自动化时，要考虑哪些缺点或者注意事项。
因为软件在产品开发过程中会变化，测试工具也要随之变化。测试员可能就会陷入陷阱，花费太多时间去设计测试工具和自动化，而忽视了实际测试。容易过分依赖自动化。自己动手测试是无可替代的。
3、工具和自动化之间有何差别
测试工具有助于测试，简化手工完成测试任务。自动化也是一种工具，但是它的执行不需要人工干预。
4、查看工具和注入工具有何异同。
这两种类型的工具都可以深入到软件中一般用户在正常情况下无法访问的地方。
查看工具是非入侵式，只允许查看发生了什么。
注入工具是入侵式的，不仅允许查看发生了什么，还可以操纵。利用这些工具，可以尝试在普通用户级曾是难以执行或不可能执行到的测试用例。
5、判断：入侵式工具是最佳类型，因为其操作与测试的软件最贴近。
错。入侵式工具在一些情况下不可以提供更好的信息和控制，但是它具有可能影响软件操作和测试结果的不一致。最好是仔细评估每种情况，选择最合适的工具，且副作用最小。
6、最简单但很有效的自动化类型是什么？
记录和回放测试用例，只需要手工执行一次，非常有效。它把测试员从单调的重复性操作中解放出来，给测试员更多的时间来寻找难以发现的软件缺陷。
7、说出可以增加文件6所描述的自动化测试中，是其更有效的一些特性。
简单编写一些步骤，而不只是捕捉步骤。暂停或等待软件对操作响应的能力。使宏知道软件缺陷是否出现的一些简单验证。
8、聪明猴子比宏和笨拙猴子有什么有点？
它们几乎都有自知能力，知道软件的状态图表，知道自己在干什么，能做什么。
第十六章：缺陷轰炸和beta测试
基本解释
缺陷轰炸：共享测试任务最有趣方法是安排缺陷轰炸。
beta测试：让他人验证和确认软件的常用过程称为beat测试。
外包测试：配置和兼容性测试通常是外包测试的理想选择。本地化测试是另一个通常被外包采用的例子。
简答
从测试角度看，在计划或者依赖beta测试时，有几个问题需要考虑：
谁是beat测试者
怎样知道beta测试者使用过软件
beta测试可以成为寻找配置和兼容性软件缺陷的好方法
易用性测试是beta测试能有所作为的另一个领域
撇开配置、兼容性和易用性，beta测试在寻找软件缺陷方面竟然出人意料地差。
习题
2、对软件进行beta测试由哪些正面作用？
由更多的人来检查软件。这是发现配置和兼容性问题的好方法。
3、对于beta测试程序由哪些注意事项
beta测试不能代替由组织、有计划、有条理的测试方法，在通常意义上的软件缺陷寻找方面没有优势。测试员应该知道beta测试者的经验水平、设备，并要确保从测试中得到预期的结果。
4、如果正在为小型软件公司测试，为什么外包配置测试是个好主意？
配置和管理一个配置测试实验室的开销和负担很重，小公司或者项目几乎无法接受。
第十七章：计划测试工作
基本解释
软件测试计算是软件测试员和产品开发小组交流意图的只要方式。
软件测试文档的标准以如下方式表达软件测试计划目的：
测试计划的目的：规定测试活动的范围、方法、资源和进度；明确正在测试的项目、要测试的特性、要执行的测试任务、每个人物的负责人，以及与计划相关的风险。
测试计划只是创建详细计划过程的一个副产品，重要的是计划过程，而不是产生的结果。
测试计划过程的最终目标是交流（而不是记录）软件测试小组的意图、期望，以及对将要执行的测试任务的理解。
团队之间的责任是明确指出可能影响测试工作的任务和交付内容。
测试阶段：
在边写边该模式中，可能只有一个测试阶段--不断测试，直到某个成员宣布测试停止。
在瀑布和螺旋模式中，从检查韩品说明书到验收测试可能有几个阶段，测试计划也属于其中一个测试阶段。
测试策略：描述测试小组用于测试整体和每个阶段的方法。
测试进度：
持续增长的结果是测试进度收到项目中先前事件的影响越来越大。
简答题
测试计划时需要考虑的资源
1）人员
2）设备
3）办公室和实验室空间
4）软件
5）外包测试公司
6）其他设备
实用的测试度量的例子如下：
1）在项目期间每天发现的软件缺陷总数
2）仍然需要修复的软件缺陷清单
3）根据严重程度对当前软件缺陷评级。
4）每个测试员找出的软件缺陷总数。
5）从每个特性或者区域发现的软件缺陷数目。
习题：
1、测试计划的目的是什么？
测试计划的目的是定义测试活动的范围、方法、资源和进度，明确要测试的目的，要测试的功能特性，要执行的测试任务，每个任务的负责人、以及与计划相关的风险，简而言之，使项目小组其他成员在测试小组如何测试软件上取得一致。
2、为什么创建计划的过程是关键，而不是计划本身？
因为测试计划中的所有问题和其他项目功能小组或者小组成员相互之间存在影响。让所有人了解和接收计划的内容是关键所在。私自建立书面文档并束之高阁不仅浪费时间，而且对项目形成危害。
3、为什么定义软件的质量和可靠性目标是测试计划重要部分？
因为如果顺其自然的话，每个人都会有自己对质量和可靠性的看法。由于看法各不相同，因此全部达到是不可能的。
4、什么时候进入和退出规则？
从一个测试阶段转移到另一个阶段的要求必须满足。一个阶段满足退出规则才会结束，新的阶段满足进入规则才会开始。
5、列出在测试计划时应考虑的一些常用资源
人员、设备、办公场所和实验室、软件、外包公司、其他供给。
6、判断：指定进度要符合固定日期，以使测试任务或者测试阶段何时开始，何时结束没有异议
错。因为测试对项目的其他方面非常依赖，所有测试进度最好根据交付日期来制定。
第十八章：编写和跟踪测试用例
基本解释
测试设计说明的目的：
组织和描述针对某种功能特性要实施的测试。它列举了要测试的功能特性和要用的方法。它明确了测试用例，但是不指明具体是什么，也不说明通过/失败的原则是什么。
测试用例
用于定义测试的实际输入值和预期输出结果，还明确指出具体地环境要求、程序要求和测试用例之间的依赖性。
无线表
无线表的每一行是一个测试用例，有自己的标识符。
表述测试用例的其他选择有简单列表、大纲甚至诸如状态表或数据流程图之类的。
测试程序
明确指出为实现相关测试设计而操作软件系统和实验具体测试用例的全部步骤。
简答
测试计划用例的4个理由
组织、重复性、跟踪、测试（或者不测试）证实
什么是特别测试？
特别测试是在没有实际计划下执行测试，没有测试用例设计，有时甚至没有高级测试计划。
特别测试就是测试员在软件面前开始乱敲键盘。
测试设计说明的部分内容
标识符
要测试的特性。
方法。描述测试软件特性的通用方法。
测试用例确认。对用于检查特性的具体测试用例的高级描述和引用。
通过/失败规则。
IEEE829标准列出测试用例应该包含在内的重要信息
标识符
测试项
输入说明
输出说明
环境要求
特殊过程要求
用例之间的依赖性
测试程序或测试脚本说明详细定义了执行测试用例的每一步操作，以下是需要定义的内容
标识符
目的
特殊要求
程序步骤
日志、设置、启动、程序、度量、关闭、重启、终止、重置、偶然事件
管理和跟踪系统基本有以下4种
凭脑子记、书面文档、电子表格、自定义数据库
习题
测试用力计划的4个理由是什么？
组织、重复性、跟踪、测试证实
什么是特别测试？
特别测试是没有计划的测试。它很容易，也很有趣，但是没有组织性、无法重复，也无法跟踪，完成后，无法证实曾经执行过。
测试设计说明的目的是什么？
测试设计说明的目的是组织和描述针对某种功能特性要实施的测试。
它列举了要测试的功能特性和要用的方法。
它明确了测试用例，但是不指明具体是什么，也不说明通过/失败的原则是什么。
什么是测试用例说明？
该文档定义测试的实际输入值和预期输出结果，还明确指出具体地环境要求、程序要求和测试用例之间的依赖性。
除了传统的文档，可以用什么方式来表述测试用例？
表格、真值表、列表和示意图。能最有效地给自己、其他测试员和项目小组其他成员标识测试用例地任何形式。
测试程序说明的目的是什么？
测试程序说明的目的是明确执行测试用例所需的全部步骤，包括如何设置、启动、执行和关闭测试用例。它还解释了测试未按计划进行时应该怎么做。
编写测试程序应该达到何种详细程度？
这个问题没有具体的答案，很大程度上取决于谁来使用程序。细节太少会导致程序不明确以及变化不定。细节太多会拖延测试进度。具体的详细程度应该由行业、公司、项目和测试小组来设定。
第十九章：报告发现的问题
基本解释
软件缺陷分类
严重性：标识软件缺陷的恶劣程度，当用户碰到该缺陷时影响的可能性和程度
① 系统崩溃、数据丢失、数据毁坏、安全性被破坏
② 操作性错误、结果错误、功能遗漏
③ 小问题、拼写错误、UI布局、罕见故障
④　建议
优先级：表示修复缺陷的重要程度和紧迫程度
①立即修复，阻止了进一步测试，立竿见影
②在产品发布前必须修复
③如果时间允许应该修复
④可能会修复，但是即使有产品也能发布
极少发生的数据毁坏缺陷应该划分为严重１，优先３
导致用户电话求助的安装指示错别字应该划分为严重３，优先２
软件缺陷的优先级在项目期间会发生变化。
软件缺陷的声明周期
打开状态、解决状态、关闭状态
可能会有审查状态
是指项目经理或者委员会决定软件缺陷是否应该修复。
另一个附加状态时推迟
审查可能认定软件缺陷应该在将来的某一时间考虑修复，但是在软件该版本中不修复。
回归缺陷
测试事件报告
目的是记录在需要调查的测试过程期间发生的任何事件。
定义的新术语：
标识符、总结、事件描述、影响。
简答
不修复软件缺陷的原因
没有足够的时间、不算真正的软件缺陷、修复的风险太大、不值得修复、无效的软件缺陷修复报告
报告软件缺陷的基本原则
尽快报告软件缺陷
有效描述软件缺陷，确保其短小、单一、明显并通用、可再现
在报告软件缺陷时不要做评价
对软件缺陷报告跟踪到底
习题
１、说出软件缺陷可能不修复的几个原因
1）没有足够的时间
2）不算真正的软件缺陷
3）修复的风险太大
4）不值得修复
5）无效的软件缺陷修复报告
２、那些基本原则可能应用于软件缺陷报告，使软件缺陷获得最大的修复机会？
1）尽早报告软件缺陷
2）有效描述软件缺陷，确保其短小、单一、明显并通用、可再现
3）在报告软件缺陷时不要做评价
4）对软件缺陷报告跟踪到底
３、描述分离和再现软件的一些技术。
1）记录所作的操作，并仔细审查
2）利用白盒测试技术寻找竞争条件、边界条件、内存泄漏和其他类似问题。
3）看软件缺陷是否与状态相关，例如依赖初始状态或其后状态
4）考虑导致软件缺陷的资源依赖性，甚至硬件问题
４、假设正在Ｗｉｎｄｏｗｓ计算器上执行测试，发现１＋１＝２，２＋２＝５，３＋３＝６，４＋４＝９，５＋５＝１，６＋６＝１３。写一个软件缺陷标题和有效描述该问题的软件缺陷描述。
标题：偶数之间的加法得到的结果比实际值大1.
描述：
测试用例：简单加法
设置步骤：启动计算器1.0版本
再现步骤：尝试两个偶数相加，例如2+2，4+4，6+6
预期结果：所有数字相加得到正确的结果，2+2=4，4+4=8......
实际结果：两个偶数相加，答案比正确的值大1，2+2=5，4+4=9，6+6=13，依此类推
５、在软件启动画面上公司徽标中的错别字应该有什么样的严重性和优先级？
严重性３（小问题），优先级２（必须在发布之前修复）
６、什么是软件缺陷生命周期的３个基本状态和２个附加状态？
基本状态：打开状态、解决状态、关闭状态
附加状态：审查、推迟
７、列出数据库软件缺陷跟踪系统比纸张系统有用得多的一些原因。
可能一眼看出处于软件缺陷生命周期的那个状态，即使对于复杂的软件缺陷也不例外。
软件缺陷不会被轻易遗漏或者忽略。
项目统计数据可以很快获得。
第二十章：成效评价
习题
１、如果使用源自软件缺陷跟踪数据库的度量来评估进展或者测试成效，为什么只计算每天发现的软件缺陷数目或者平均发现速度时不充分的？
这没有说明问题的全部。
测试员有可能正在测试软件最复杂的部分。
测试区域可能是有最富有经验的程序员编写的，也有可能是最没有经验的测试员编写的。
测试的代码可能已经测试过，也可能是全新的。
２、列举可以更精确、跟准确评估个人测试进展或者测试成效的一些其他软件度量。
每个平均发现的软件缺陷数目。
目前发现的软件缺陷总数。
修复的缺陷和所有发现的缺陷的比例。
严重性1或优先级1的软件缺陷与全部发现的软件缺陷比例。
从解决状态到关闭状态的平均时间。
３、从Cala-U-Log v3.0项目中,提取出提交给Terry的所有已解决软件缺陷,其数据库查询是什么样的(任何需要的格式)?
Product EQUALS Calc-U-Lot AND
Version EQUALS 3.0 AND
Status EQUALS Resolved AND
Assign TO EQUALS Terry
４、如果某项目中软件缺陷发现速度下降很厉害,全体人员都对项目即将关闭准备发布感到兴奋,请问可能有那两个原因会导致这种受数据欺骗的现象.
可能是要进入发布测试阶段，然而软件的所有部分并未全部测试，仅仅在当前阶段曲线是平坦的。
可能测试员忙于回归测试和关闭软件缺陷，而无暇寻找新的软件缺陷。
可能是在周末或测试员出去度假了。
第二十一章：软件质量保证
填空题
软件质量保证的关键步骤是软件质量审核，它是在软件投入运行前，对软件需求分析、设计规格说明和编码实现的最终审查。
一致性费用：是指与一次性计划和执行测试相关的全部费用，用于保证软件按照预期方式运行。
如果发现了软件缺陷，必须花时间分离、报告和回归测试以保证其得以修复，那么非一致性费用就会上涨。
因为这些软件缺陷时在发布之前发现，所以这些费用归属于内部失败。
非一致性费用：
如果软件缺陷被遗漏并落到客户手里，结果就是代价昂贵的产品支持电话，可能还需要修复、重新测试和发布软件，更糟糕的情况产品要召回或者卷入官司。
这些外部失败的费用属于非一致性费用。
软件质量保证人员(QA)
软件质量保证人员的主要职责是检查和评价当前软件开发的过程，找出改进过程的方法，以达到防止软件缺陷出现的目标。
QA团队如何实现目标：
对项目进行近似完全的控制，建立标准和方法论，有条理地仔细监视和评估软件开发过程，对发现的过程问题反馈解决建议，执行测试，拥有决定产品何时准备发布地授权。
能力成熟模型(CMM)
软件的能力成熟度模型（CMM）是一个行业标准模型，用于定于和评价软件公司开发过程的成熟度，提供怎样做才能提高软件质量的指导。
5级CMM成熟度描述
1级：初始的。（随意的，常常混乱）
2级：可重复的。（项目级）
3级：定义的。（具备了组织化思想，而不仅仅是针对于项目）
4级：可管理的。（组织过程处于统计的控制之下）
5级：不断优化的。（）
ISO 9000
用得很好的两个原因
它的目标在于开发过程，而不是产品。
只决定过程的要求是什么，而不管如何达到。
习题
1.测试费用为什么与一致性的费用相关?
因为无论开发过程多好，都要进行一次测试，根据产品说明书验证产品，根据用户需要进行合法检查。如果没有发现软件缺陷非常好，但是计划、开发和执行测试的费用都要算到一致性费用中。
2.判断,测试小组负责质量。
错。测试的目的是发现软件缺陷。测试员是不会在产品中放进软件缺陷，也不保证完成测试时不再有软件缺陷。
3.为什么要获得QA工程师得称号时难以做到的?
因为意味着要保证产品质量。
4.为什么测试小组或者质量保证小组独立向高级管理员报告好?
如果他们向开发经理或者项目经理报告，就会在寻找软件缺陷和编制软件或者进度会议之间产生利益冲突。
5.如果某公司在软件中编入 ISO 9000-3标准,那么它的CMM级是多少?为什么?
他们可能处于CMM3级，也许达到了CMM4级的某些要求。它们的CMM级不是2级，因为2级只到项目级。3级达到整个组织或者公司级。4级开始运行统计控制。
第二十二章：软件测试员的职业
大多数软件测试工作的类型
软件测试技术人员
软件测试员或者软件测试工程师
软件测试工具开发师或软件测试开发工程师
软件测试负责人
软件测试经理
寻找软件测试工作的方法
使用因特网
查询报纸和杂志
打电话咨询
在实习和协作中寻找机会
职业网络
从事临时工作
获得亲身体验的方法
beta测试。
成为易用性测试参与者。
称为赏金缺陷捕捉者。
学习了解开源代码测试以及测试工具。
比较有名的软件测试会议
国际软件测试会议（ISTC）
软件测试分析和评审（STAR）
软件质量国际会议（ICSQ）
软件测试国际会议（ICSTEST）
软件质量世界会议（WCSQ）
通过因特网搜索关于软件测试的网站
搜索software testing或者software test
网站：Bug Net、Software Testing Hotlist、QA forums、Sticky Minds、Security Focus、comp.software.testing、comp.risks
专注于软件和软件质量的专业组织
美国软件测试协会（AST）
美国质量委员会（ASQ）
美国计算机协会（ACM）
软件质量委员会（SSQ）
计算机用户的权力议案如下：
观点
安装
服从
指示
控制
反馈
依赖
范围
协助
易用性
习题
1、在因特网搜索软件测试职位时，应该使用什么样的关键字？
由于软件测试员的工作名称和描述是变化的。因此应该搜索software test、software testing、quality assurance 和 QA
2、说出在软件发布之前参加测试的三条路径。
beta测试。
易用性测试。另一个方法是
测试开源代码的软件并使用开源的测试工具。
3、软件测试员的目标是什么？
软件测试员的目标是尽可能找出软件缺陷，并确保其得以修复

填空题
根据测试的不同阶段，检验软件产品质量的最后一道工序是____系统测试___
白盒测试中逻辑覆盖的级别包括语句覆盖、判定覆盖、条件覆盖和路径覆盖。其中，语句覆盖测试的是代码中的每一条语句是否被执行，属于最基本、测试强度最弱的覆盖级别
